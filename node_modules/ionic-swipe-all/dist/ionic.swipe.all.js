import { Directive, ElementRef, EventEmitter, Output } from '@angular/core';
import { HammerGestureConfig } from '@angular/platform-browser';
import * as Hammer from 'hammerjs';
export class IonicSwipeAll extends HammerGestureConfig {
    constructor(elem) {
        super();
        this.elem = elem;
        this.swipe = new EventEmitter();
        this.swipeup = new EventEmitter();
        this.swipedown = new EventEmitter();
        this.hammer = Hammer;
    }
    ngOnInit() {
        const instance = new Hammer(this.elem.nativeElement);
        instance.get('swipe').set({ direction: this.hammer.DIRECTION_VERTICAL });
        instance.on('swipe', event => this.swipe.emit(event));
        instance.on('swipeup', event => this.swipeup.emit(event));
        instance.on('swipedown', event => this.swipedown.emit(event));
    }
}
IonicSwipeAll.decorators = [
    { type: Directive, args: [{
                selector: '[swipeAll]',
            },] },
];
/** @nocollapse */
IonicSwipeAll.ctorParameters = () => [
    { type: ElementRef, },
];
IonicSwipeAll.propDecorators = {
    "swipe": [{ type: Output },],
    "swipeup": [{ type: Output },],
    "swipedown": [{ type: Output },],
};
//# sourceMappingURL=ionic.swipe.all.js.map